language Expressions

model ExpressionModel {
    name: identifier;
    units: ExpressionUnit[];
}

modelunit ExpressionUnit {
    variables: Variable[];
    expressions: Expression[]
}

interface BaseType {
    name: identifier;
}

limited Type implements BaseType {
    String;
    Integer;
    Boolean;
    ANY;
}

abstract expression Expression {
}

expression AbsExpression base Expression {
    expr: EntityExpression;
}

binary expression MultiplyExpression base BinaryExpression {
    priority = 8;
}

concept Function {
    name: identifier;
    body: Expression;
    parameters: Variable[];
    reference declaredType : Type;
}

concept Variable {
    name: identifier;
    reference declaredType: Type;
}

expression VariableRef base Expression {
    reference variable: Variable;
}

abstract expression LiteralExpression base Expression {}

expression StringLiteralExpression base LiteralExpression {
    value: string;
}

expression NumberLiteralExpression base LiteralExpression {
    value: string;
}

expression BooleanLiteralExpression base LiteralExpression {
    value: boolean; // TODO should be changed to type boolean
}

abstract binary expression BinaryExpression base Expression {
    left: Expression;
    right: Expression;
}

binary expression PlusExpression base BinaryExpression {
    priority = 4;
}

binary expression DivideExpression base BinaryExpression {
    priority = 8;
}

binary expression AndExpression base BinaryExpression {
    priority = 1;
}

binary expression OrExpression base BinaryExpression {
    priority = 1;
}

abstract binary expression ComparisonExpression base BinaryExpression {
}

binary expression LessThenExpression base ComparisonExpression {
    priority = 10;
}

binary expression GreaterThenExpression base ComparisonExpression {
    priority = 10;
}

binary expression EqualsExpression base ComparisonExpression {
    priority = 10;
}

expression FunctionCallExpression base Expression {
    reference function: Function;
    arguments: Expression[];
}

expression IfExpression base Expression {
    condition: Expression;
    whenTrue: Expression;
    whenFalse: Expression;
}


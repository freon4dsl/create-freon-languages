validator Entity for language Entity

AttributeType  {
	self.extra >= 12;
	self.extra <= 30;
}
EntityModelUnit {
    notEmpty self.entities;
    in self.entities isunique name;
    notEmpty self.functions;
    in self.functions isunique name;
    validIdentifier; // default is 'name'
}
Entity {
    notEmpty self.attributes;
    in self.attributes isunique name;
    notEmpty self.functions;
    in self.functions isunique name;
    validIdentifier;
}
AttributeWithLimitedType {
    validIdentifier self.name;
}
Variable {
    validIdentifier; // default is 'name'
}
EntityFunction {
    typecheck conformsTo (self.expression, self.declaredType);
    in self.parameters isunique name;
    validIdentifier ;
}
AbsExpression {
    typecheck equalsType( self.expr, AttributeType:Integer );
}
MultiplyExpression {
    typecheck equalsType( self.left, AttributeType:Integer );
    typecheck equalsType( self.right, AttributeType:Integer );
    typecheck conformsTo( self.left, self.right );
}
PlusExpression {
    typecheck equalsType( self.left, AttributeType:Integer );
    typecheck equalsType( self.right, AttributeType:Integer );
    typecheck conformsTo( self.left, self.right );
}
DivideExpression {
    typecheck equalsType( self.left, AttributeType:Integer );
    typecheck equalsType( self.right, AttributeType:Integer );
}
AndExpression {
    typecheck equalsType( self.left, AttributeType:Boolean );
    typecheck equalsType( self.right, AttributeType:Boolean );
}
OrExpression {
    typecheck equalsType( self.left, AttributeType:Boolean );
    typecheck equalsType( self.right, AttributeType:Boolean );
}
ComparisonExpression {
    typecheck equalsType( self.left, self.right );
}
IfExpression {
    typecheck equalsType( self.condition, AttributeType:Boolean );
    typecheck conformsTo( self.whenTrue, self.whenFalse );
}
